module booth_mul(z_out,X,Y,clk,rst,start,mul_d ); 
input clk;
input rst; 
input start;
input signed [7:0]X,Y;        //8 bit signed data X,Y
output reg mul_d;
output signed [18:0] z_out;  //19 bit signed output 
reg  valid; 
reg signed [18:0]z_out;
reg signed [15:0] Z,next_Z,Z_temp; 
reg next_state, pres_state; 
reg [1:0] temp,next_temp;
reg [2:0] count,next_count;
reg next_valid;
parameter IDLE = 1'b0;          //IDLE=0
parameter START = 1'b1;       //START =1
always @ (posedge clk)       //+ive edge triggered clock
 begin 
if(rst) begin                              //reset=1
 Z = 16'b0;                                 //16 bit z contain all 0’s
valid = 1’b0;
 pres_state = 1’b0;                  //present state =0
 temp = 2'b0;                            //temp=00
count = 3’b0;                            //count =000
 mul_d = 1'b0;                          //mul_d=0
end
 else begin
 Z <= next_Z;                           
valid <= next_valid;
 pres_state <= next_state;     //present state = next state
temp <= next_temp; 
count <= next_count; 
end 
end 
always @(posedge valid)      //+ive edge triggered valid
 begin
 mul_d = 1;
 if(Z[15])
 z_out = {{3{1'b1}},Z};               //19 bit z_out with msb 111
 else
 z_out = {{3{1'b0}},Z};               // 19 bit z_out with msb 000
#20;                                             // 20 ns delay

 mul_d = 0; 
end 
always @ (*)                              // all above parameters are variable
begin case(pres_state)   
IDLE:begin next_count = 3’b0;  //next_count = 000
 next_valid = 1’b0;
 if(start)
 begin mul_d = 0; 
next_state = START;
next_temp = {X[0],1'b0};             //9 bit next_temp with 0  lsb
next_Z = {8'd0,X};                         //9 bit next_z with all 8 bit msb 0’s
 end 
else begin
 next_state = pres_state;        
 next_temp = 3'd0; 
next_Z = 15'd0; 
End
 end 
START: 
begin case(temp) 
2'b10: Z_temp = {Z[15:8]-Y,Z[7:0]};       
 2'b01: Z_temp = {Z[15:8]+Y,Z[7:0]}; 
default: Z_temp = {Z[15:8],Z[7:0]};
 endcase 
next_temp = {X[count+1],X[count]}; 
next_count = count + 1'b1; 
next_Z = Z_temp >>> 1; 
next_valid = (&count) ? 1'b1 : 1'b0; 
next_state = (&count) ? IDLE : pres_state;
 end
 endcase 
End
 endmodule

